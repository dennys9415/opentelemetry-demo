name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        cd src/frontend && npm ci

    - name: Run tests
      run: |
        make test

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Extract version
      id: get_version
      run: |
        if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          # OpenTelemetry Demo ${{ steps.get_version.outputs.VERSION }}
          
          ## Changes
          - Automated release
          - Updated dependencies
          - Bug fixes and improvements
          
          ## Deployment
          ```bash
          # Update to this version
          git checkout ${{ steps.get_version.outputs.VERSION }}
          make setup
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./docker-compose.yml
        asset_name: docker-compose.yml
        asset_content_type: text/yaml

    - name: Update documentation
      run: |
        # Update version in documentation if needed
        sed -i "s/version:.*/version: ${{ steps.get_version.outputs.VERSION }}/" docs/configuration.md

    - name: Notify success
      if: success()
      run: |
        echo "Release ${{ steps.get_version.outputs.VERSION }} created successfully!"

  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/opentelemetry-demo-frontend
          ${{ secrets.DOCKERHUB_USERNAME }}/opentelemetry-demo-backend
        tags: |
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/opentelemetry-demo-frontend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./src/backend
        file: ./src/backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/opentelemetry-demo-backend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release, docker-publish]
    if: contains(github.ref, 'tags')
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        ./scripts/deploy.sh staging
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}